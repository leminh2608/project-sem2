// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement()) @map("user_id")
  fullName  String   @map("full_name") @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      UserRole
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  teacherClasses    Class[]           @relation("TeacherClasses")
  courseStudents    CourseStudent[]
  classStudents     ClassStudent[]
  attendance        Attendance[]

  @@index([role], map: "idx_role")
  @@map("users")
}

model Course {
  courseId    Int         @id @default(autoincrement()) @map("course_id")
  courseName  String      @map("course_name") @db.VarChar(100)
  description String?     @db.Text
  level       CourseLevel @default(Beginner)
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  classes        Class[]
  courseStudents CourseStudent[]

  @@index([level], map: "idx_level")
  @@map("courses")
}

model CourseStudent {
  courseId     Int      @map("course_id")
  studentId    Int      @map("student_id")
  registeredAt DateTime @default(now()) @map("registered_at")

  // Relations
  course  Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  student User   @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@id([courseId, studentId])
  @@index([studentId], map: "idx_course_student")
  @@map("course_students")
}

model Class {
  classId   Int       @id @default(autoincrement()) @map("class_id")
  courseId  Int       @map("course_id")
  className String    @map("class_name") @db.VarChar(100)
  teacherId Int       @map("teacher_id")
  startDate DateTime  @map("start_date") @db.Date
  endDate   DateTime? @map("end_date") @db.Date

  // Relations
  course        Course         @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
  teacher       User           @relation("TeacherClasses", fields: [teacherId], references: [userId], onDelete: Cascade)
  classStudents ClassStudent[]
  schedules     Schedule[]

  @@index([teacherId], map: "idx_teacher")
  @@map("classes")
}

model ClassStudent {
  classId  Int      @map("class_id")
  studentId Int     @map("student_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  class   Class @relation(fields: [classId], references: [classId], onDelete: Cascade)
  student User  @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@id([classId, studentId])
  @@index([studentId], map: "idx_student")
  @@map("class_students")
}

model Schedule {
  scheduleId Int      @id @default(autoincrement()) @map("schedule_id")
  classId    Int      @map("class_id")
  lessonDate DateTime @map("lesson_date") @db.Date
  startTime  DateTime @map("start_time") @db.Time
  endTime    DateTime @map("end_time") @db.Time
  roomOrLink String?  @map("room_or_link") @db.VarChar(255)

  // Relations
  class      Class        @relation(fields: [classId], references: [classId], onDelete: Cascade)
  attendance Attendance[]

  @@index([lessonDate], map: "idx_date")
  @@map("schedules")
}

model Attendance {
  attendanceId Int              @id @default(autoincrement()) @map("attendance_id")
  scheduleId   Int              @map("schedule_id")
  studentId    Int              @map("student_id")
  status       AttendanceStatus @default(absent)
  note         String?          @db.VarChar(255)

  // Relations
  schedule Schedule @relation(fields: [scheduleId], references: [scheduleId], onDelete: Cascade)
  student  User     @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@index([status], map: "idx_status")
  @@map("attendance")
}

enum UserRole {
  admin
  teacher
  student
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum AttendanceStatus {
  present
  absent
  excused
}
